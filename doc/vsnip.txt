*vim-vsnip* *vsnip*

V(SCode) Snip(pet) like plugin.


==============================================================================
CONTENTS                                                      *vsnip-contents*

INSTALL                                                        |vsnip-install|
VARIABLE                                                      |vsnip-variable|
MAPPING                                                        |vsnip-mapping|
COMMAND                                                        |vsnip-command|
LIMITATION                                                  |vsnip-limitation|
CHANGELOG                                                    |vsnip-changelog|



==============================================================================
INSTALL                                                        *vsnip-install*

You can use your favorite plugin manager.

>
  " dein.vim
  call dein#add('hrsh7th/vim-vsnip')

  " vim-plug
  Plug 'hrsh7th/vim-vsnip'

  " neobundle
  NeoBundle 'hrsh7th/vim-vsnip'
<

If you use `deoplete.nvim` or other supported integration, you can use `vim-vsnip-integ`.

>
  " dein.vim
  call dein#add('hrsh7th/vim-vsnip-integ')

  " vim-plug
  Plug 'hrsh7th/vim-vsnip-integ'

  " neobundle
  NeoBundle 'hrsh7th/vim-vsnip-integ'
<

If you want to know supported plugins, you can see https://github.com/hrsh7th/vim-vsnip-integ


==============================================================================
VARIABLE                                                      *vsnip-variable*

>
  let g:vsnip_extra_mapping = v:true
<
    Enable or disable extra mappings.


>
  let g:vsnip_snippet_dir = expand('~/.vsnip')
<
    Specify user snippet directory.


>
  let g:vsnip_snippet_dirs = []
<
    Specify plugin snippet directory.


>
  let g:vsnip_sync_delay = 0
<
    Specify delay time to sync same tabstop placeholder.


>
  let g:vsnip_choice_delay = 500
<
    Specify delay time to show choice candidates.
    Sometimes choice completion menu is closed by auto-completion engine.
    You can use this variable to solve this conflict.


>
  let g:vsnip_namespace = ''
<
    Specify all snippet prefix's prefix.
    It useful when you use auto-completion.



==============================================================================
MAPPING                                                        *vsnip-mapping*

You can use your favorite key to expand or jump snippet.
The below example uses '<Tab>' key.

>
    " Expand
    imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
    smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

    " Expand or jump
    imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
    smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'

    " Jump forward or backward
    imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
    smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
    imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
    smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'

    " Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
    " See https://github.com/hrsh7th/vim-vsnip/pull/50
    nmap        <C-l>   <Plug>(vsnip-select-text)
    xmap        <C-l>   <Plug>(vsnip-select-text)
    smap        <C-l>   <Plug>(vsnip-select-text)
    nmap        <C-j>   <Plug>(vsnip-cut-text)
    xmap        <C-j>   <Plug>(vsnip-cut-text)
    smap        <C-j>   <Plug>(vsnip-cut-text)
<



==============================================================================
COMMAND                                                        *vsnip-command*

VsnipOpen~

>
  :VsnipOpen
  :VsnipOpenEdit
  :VsnipOpenSplit
  :VsnipOpenVsplit
<

Open snippet source file under `g:vsnip_snippet_dir`.



==============================================================================
LIMITATION                                                  *vsnip-limitation*

Currently vsnip has below limitations.

1. placeholder transform feature is not supported.~
I plan to support it later.


2. if text diff has multiple candidates, always use last one.~

below snippet is not work for expected.
>
  class $1${2: extends ${3:SuperClass}} {
    $0
  }
<

below one is work as expected.
>
  class $1 ${2:extends ${3:SuperClass} }{
    $0
  }
<



==============================================================================
CHANGELOG                                                     *vsnip-changelog*

2019/12/01~
- publish v2.

