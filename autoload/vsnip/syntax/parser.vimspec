let s:expect = themis#helper('expect')

Describe vsnip#syntax#parser

  Describe #parse

    It Should parse1
      let l:text = join([
            \ 'console.log($0$1)'
            \ ], "\n")
      let l:parsed = vsnip#syntax#parser#parse(l:text)
      call s:expect(l:parsed[0]).to_equal('console.log(')
      call s:expect(l:parsed[1]).to_equal({
            \   'type': 'placeholder',
            \   'id': 0,
            \   'label': ''
            \ })
      call s:expect(l:parsed[2]).to_equal({
            \   'type': 'placeholder',
            \   'id': 1,
            \   'label': ''
            \ })
      call s:expect(l:parsed[3]).to_equal(')')
    End

    It Should parse choice
      let l:text = join([
            \ 'console.${1|log,warn,error|}($2)$0'
            \ ], "\n")
      let l:parsed = vsnip#syntax#parser#parse(l:text)
      call s:expect(l:parsed[0]).to_equal('console.')
      call s:expect(l:parsed[1]).to_equal({
            \   'type': 'placeholder',
            \   'id': 1,
            \   'label': 'log',
            \   'items': ['log', 'warn', 'error']
            \ })
      call s:expect(l:parsed[2]).to_equal('(')
      call s:expect(l:parsed[3]).to_equal({
            \   'type': 'placeholder',
            \   'id': 2,
            \   'label': '',
            \ })
      call s:expect(l:parsed[4]).to_equal(')')
      call s:expect(l:parsed[5]).to_equal({
            \   'type': 'placeholder',
            \   'id': 0,
            \   'label': ''
            \ })
    End

    It Should parse nested placeholder
      let l:text = join([
            \ 'class $1${2: extends ${3:SuperClass}} {',
            \ "\t$0",
            \ '}'
            \ ], "\n")
      let l:parsed = vsnip#syntax#parser#parse(l:text)
      call themis#log(json_encode(l:parsed))
    End

  End

End

