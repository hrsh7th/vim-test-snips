let s:expect = themis#helper('expect')
let s:Snippet = vsnip#session#snippet#import()

let s:start_position = {
      \   'line': 1,
      \   'character': 1
      \ }

Describe vsnip#snippet

  Describe #follow

    It Should follow diff overlap left
      let l:snippet = s:Snippet.new(s:start_position, "class $1 {\n\tpublic ${2:default}() {\n\t\t$0\n\t}\n}")
      let l:followed = l:snippet.follow(0, {
            \   'range': {
            \     'start': {
            \       'line': 2,
            \       'character': 1
            \     },
            \     'end': {
            \       'line': 2,
            \       'character': 12
            \     }
            \   },
            \   'text': '___'
            \ })
      call s:expect(l:followed).to_equal(v:false)
    End

    It Should follow diff overlap right
      let l:snippet = s:Snippet.new(s:start_position, "class $1 {\n\tpublic ${2:default}() {\n\t\t$0\n\t}\n}")
      let l:followed = l:snippet.follow(0, {
            \   'range': {
            \     'start': {
            \       'line': 2,
            \       'character': 12
            \     },
            \     'end': {
            \       'line': 2,
            \       'character': 17
            \     }
            \   },
            \   'text': '___(params)'
            \ })
      call s:expect(l:followed).to_equal(v:false)
    End

    It Should follow diff cover
      let l:snippet = s:Snippet.new(s:start_position, "class $1 {\n\tpublic ${2:default}() {\n\t\t$0\n\t}\n}")
      let l:followed = l:snippet.follow(0, {
            \   'range': {
            \     'start': {
            \       'line': 2,
            \       'character': 7
            \     },
            \     'end': {
            \       'line': 2,
            \       'character': 16
            \     }
            \   },
            \   'text': '___'
            \ })
      call s:expect(l:followed).to_equal(v:false)
    End

    It Should follow diff include
      let l:snippet = s:Snippet.new(s:start_position, "class $1 {\n\tpublic ${2:default}() {\n\t\t$0\n\t}\n}")
      call l:snippet.follow(0, {
            \   'range': {
            \     'start': {
            \       'line': 2,
            \       'character': 9
            \     },
            \     'end': {
            \       'line': 2,
            \       'character': 12
            \     }
            \   },
            \   'text': '___'
            \ })
      call s:expect(l:snippet.text()).to_equal("class  {\n\tpublic d___ult() {\n\t\t\n\t}\n}")
      call s:expect(l:snippet.get_next_jump_point(1).placeholder.text()).to_equal('d___ult')
    End

  End

  Describe #sync

    It Should sync same tabstop placeholder 1
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(${1:default}, $1)')
      call s:expect(l:snippet.text()).to_equal('console.log(default, default)')
    End

    It Should sync same tabstop placeholder 2
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(${1:default}, $1)')
      call l:snippet.follow(0, {
            \   'range': {
            \     'start': {
            \       'line': 1,
            \       'character': 13
            \     },
            \     'end': {
            \       'line': 1,
            \       'character': 17
            \     }
            \   },
            \   'text': '___'
            \ })
      call l:snippet.sync()
      call s:expect(l:snippet.text()).to_equal('console.log(___ult, ___ult)')
    End

  End

  Describe #text

    It Should return text1
      let l:snippet = s:Snippet.new(s:start_position, 'console.log($0${1:default})')
      call s:expect(l:snippet.text()).to_equal('console.log(default)')
    End

    It Should return text2
      call vsnip#selected_text('THIS_IS_SELECTED_TEXT')
      let l:snippet = s:Snippet.new(s:start_position, '$TM_SELECTED_TEXT')
      call s:expect(l:snippet.text()).to_equal('THIS_IS_SELECTED_TEXT')
    End

    It Should return text2
      call vsnip#selected_text('THIS_IS_SELECTED_TEXT')
      let l:snippet = s:Snippet.new(s:start_position, '${TM_SELECTED_TEXT}')
      call s:expect(l:snippet.text()).to_equal('THIS_IS_SELECTED_TEXT')
    End

  End

  Describe #range

    It Should return range1
      let l:snippet = s:Snippet.new(s:start_position, "01234\n56789")
      call s:expect(l:snippet.range()).to_equal({
            \   'start': {
            \     'line': s:start_position.line,
            \     'character': s:start_position.character
            \   },
            \   'end': {
            \     'line': s:start_position.line + 1,
            \     'character': 5
            \   }
            \ })
    End

    It Should return range2
      let l:snippet = s:Snippet.new(s:start_position, "012345")
      call s:expect(l:snippet.range()).to_equal({
            \   'start': {
            \     'line': s:start_position.line,
            \     'character': s:start_position.character
            \   },
            \   'end': {
            \     'line': s:start_position.line,
            \     'character': 7
            \   }
            \ })
    End

  End

  Describe #offset_to_position

    It Should return position from offset
      let l:snippet = s:Snippet.new(s:start_position, "class クラス {\n\tpublic constructor() {\n\t\t$0\n\t}\n}")
      call s:expect(l:snippet.offset_to_position(13)).to_equal({
            \   'line': 2,
            \   'character': 1
            \ })
    End

  End

  Describe #position_to_offset

    It Should return offset from position
      let l:snippet = s:Snippet.new(s:start_position, "class クラス {\n\tpublic constructor() {\n\t\t$0\n\t}\n}")
      call s:expect(l:snippet.position_to_offset({
            \   'line': 2,
            \   'character': 1
            \ })).to_equal(13)
    End

  End

  Describe #get_node_by_position

    It Should return node 1
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(${1:012345})')
      call s:expect(l:snippet.get_node_by_position({
      \   'line': 1,
      \   'character': 13
      \ }).text()).to_equal('012345')
    End

  End

  Describe #insert_after

    It Should insert node 1
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(${1})')
      let l:node = l:snippet.get_node_by_position({
      \   'line': 1,
      \   'character': 13
      \ })
      call l:snippet.insert_after(l:node, [
      \   vsnip#session#snippet#node#create_from_ast({ 'type': 'text', 'escaped': '__1' }),
      \   vsnip#session#snippet#node#create_from_ast({ 'type': 'text', 'escaped': '__2' })
      \ ])
      let l:parent = l:snippet.get_parent(l:node)
      call s:expect(l:parent.children[0].text()).to_equal('')
      call s:expect(l:parent.children[1].text()).to_equal('__1')
      call s:expect(l:parent.children[2].text()).to_equal('__2')
    End

  End

  Describe #get_next_jump_point

    It Should return next jump point 1
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(${1:012345})')
      call s:expect(l:snippet.get_next_jump_point(0).range).to_equal({
            \   'start': {
            \     'line': 1,
            \     'character': 13
            \   },
            \   'end': {
            \     'line': 1,
            \     'character': 19
            \   }
            \ })
    End

    It Should return next jump point 2
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(${1:0123${2:456}7890})')
      call s:expect(l:snippet.get_next_jump_point(0).range).to_equal({
            \   'start': {
            \     'line': 1,
            \     'character': 13
            \   },
            \   'end': {
            \     'line': 1,
            \     'character': 24
            \   }
            \ })
      call s:expect(l:snippet.get_next_jump_point(1).range).to_equal({
            \   'start': {
            \     'line': 1,
            \     'character': 17,
            \   },
            \   'end': {
            \     'line': 1,
            \     'character': 20
            \   }
            \ })
    End

    It Should return next jump point 3
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(${1:0${3:12}3${2:456}7890})')
      call s:expect(l:snippet.get_next_jump_point(0).range).to_equal({
            \   'start': {
            \     'line': 1,
            \     'character': 13
            \   },
            \   'end': {
            \     'line': 1,
            \     'character': 24
            \   }
            \ })
      call s:expect(l:snippet.get_next_jump_point(1).range).to_equal({
            \   'start': {
            \     'line': 1,
            \     'character': 17,
            \   },
            \   'end': {
            \     'line': 1,
            \     'character': 20
            \   }
            \ })
      call s:expect(l:snippet.get_next_jump_point(2).range).to_equal({
            \   'start': {
            \     'line': 1,
            \     'character': 14,
            \   },
            \   'end': {
            \     'line': 1,
            \     'character': 16
            \   }
            \ })
    End

    It Should return next jump point 4
      let l:snippet = s:Snippet.new(s:start_position, 'console.log(0${1}123456789${1}0)')
      call s:expect(l:snippet.get_next_jump_point(0).range).to_equal({
            \   'start': {
            \     'line': 1,
            \     'character': 14
            \   },
            \   'end': {
            \     'line': 1,
            \     'character': 14
            \   }
            \ })
    End

  End

End

