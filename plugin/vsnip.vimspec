let s:expect = themis#helper('expect')

Describe vsnip

  Context expand

    It should expand when prefix start col is 1
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec1')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Plug>(vsnip-assert)", 'xt')
    End

    It should expand when prefix is in middle of line
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['(snippet)'])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, '(spec1)')
      call cursor([1, 6])
      call feedkeys("a\<C-j>\<Plug>(vsnip-assert)", 'xt')
    End

    It should expand when prefix was selected in select-mode
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec1')
      call feedkeys("0v$\<C-g>\<C-j>\<Plug>(vsnip-assert)", 'xt')
    End

    It should not expand when prefix does not separate by word boundary
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['(aspec1', ')'])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, '(aspec1)')
      call cursor([1, 7])
      call feedkeys("a\<C-j>\<Plug>(vsnip-assert)", 'xt')
    End

    It should jump to first placeholder when expanded snippet
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 1])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec2')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Plug>(vsnip-assert)", 'xt')
    End

  End

  Context jump

    It should jump to first of snippet
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 1])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec2')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should jump to middle of snippet
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 4])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec3')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should jump to last of snippet
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 8])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec4')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should select 1 length first of snippet text 
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(mode(1)).to_equal('s')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 1])
        call feedkeys("\<C-g>o", 'xt')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 1])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec5')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should select 1 length middle of snippet text 
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(mode(1)).to_equal('s')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 3])
        call feedkeys("\<C-g>o", 'xt')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 3])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec6')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should select 1 length last of snippet text 
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(mode(1)).to_equal('s')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 8])
        call feedkeys("\<C-g>o", 'xt')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 8])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec7')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should select 3 length first of snippet text 
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(mode(1)).to_equal('s')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 3])
        call feedkeys("\<C-g>o", 'xt')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 1])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec8')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should select 3 length middle of snippet text 
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(mode(1)).to_equal('s')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 5])
        call feedkeys("\<C-g>o", 'xt')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 3])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec9')
      call cursor([1, 5])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

    It should select 3 length last of snippet text 
      let g:vsnip_assert = {}
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal(['snippet'])
        call s:expect(mode(1)).to_equal('s')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 7])
        call feedkeys("\<C-g>o", 'xt')
        call s:expect(getcurpos()[1 : 2]).to_equal([1, 5])
        call vsnip#deactivate()
      endfunction
      enew!
      call setline(1, 'spec10')
      call cursor([1, 6])
      call feedkeys("a\<C-j>\<Tab>\<Plug>(vsnip-assert)", 'xt')
    End

  End

  Context realworld

    It should work spec1
      enew!
      call setline(1, 'realworld1')
      call cursor([1, 10])

      let g:vsnip_assert = {}
      let l:sequence = ''
      let l:sequence .= "a\<C-j>\<Plug>(vsnip-assert)"
      function g:vsnip_assert.step1()
        call s:expect(getbufline('%', '^', '$')).to_equal([
        \ '/** @class ClassName */',
        \ 'class ClassName extends ParentClassName {',
        \ '  public constructor() {',
        \ '    ',
        \ '  }',
        \ '}',
        \ ])
      endfunction

      let l:sequence .= "ModifiedClassName\<Plug>(vsnip-assert)"
      function g:vsnip_assert.step2()
        call vsnip#get_session().on_text_changed()
        call s:expect(getbufline('%', '^', '$')).to_equal([
        \ '/** @class ModifiedClassName */',
        \ 'class ModifiedClassName extends ParentClassName {',
        \ '  public constructor() {',
        \ '    ',
        \ '  }',
        \ '}',
        \ ])
      endfunction

      let l:sequence .= "\<Tab>\<Tab>ModifiedClassName\<Plug>(vsnip-assert)"
      function g:vsnip_assert.step3()
        call vsnip#get_session().on_text_changed()
        call s:expect(getbufline('%', '^', '$')).to_equal([
        \ '/** @class ModifiedClassName */',
        \ 'class ModifiedClassName extends ModifiedClassName {',
        \ '  public constructor() {',
        \ '    ',
        \ '  }',
        \ '}',
        \ ])
      endfunction

      let l:sequence .= "\<S-Tab>\<BS>\<Plug>(vsnip-assert)"
      function g:vsnip_assert.step4()
        call vsnip#get_session().on_text_changed()
        call s:expect(getbufline('%', '^', '$')).to_equal([
        \ '/** @class ModifiedClassName */',
        \ 'class ModifiedClassName {',
        \ '  public constructor() {',
        \ '    ',
        \ '  }',
        \ '}',
        \ ])
      endfunction

      let l:sequence .= "\<Tab>\<Plug>(vsnip-assert)"
      function g:vsnip_assert.step5()
        call vsnip#get_session().on_text_changed()
        call s:expect(getbufline('%', '^', '$')).to_equal([
        \ '/** @class ModifiedClassName */',
        \ 'class ModifiedClassName {',
        \ '  public constructor() {',
        \ '    ',
        \ '  }',
        \ '}',
        \ ])
        call vsnip#deactivate()
      endfunction
      call feedkeys(l:sequence, 'xt')
    End

  End

End

